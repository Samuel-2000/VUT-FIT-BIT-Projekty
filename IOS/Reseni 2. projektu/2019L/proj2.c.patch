--- proj2.c.odevzdany	2020-05-06 23:53:08.000000000 +0200
+++ proj2.c	2020-05-17 19:20:58.000000000 +0200
@@ -1,336 +1,290 @@
-// IOS Projekt 2 Semafory Faneuil Hall Problem
-// Samuel Kuchta 2019/2020 (xkucht11)
+  // IOS Projekt 2: Semafory / Faneuil Hall Problem.
+  // Samuel Kuchta 2019/2020 (xkucht11).
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
-#include <sys/wait.h>
 #include <sys/types.h>
 #include <semaphore.h>
 #include <fcntl.h>
 #include <sys/shm.h>
-#include <signal.h>
 
+#define wait_random_time(max) { if (max > 0) usleep(rand() % (max * 1000)); }  // Definuje funkci pro nahodny cas v milisekundach.
 
-#define Semafor1_NAME "/Sudca_sem"
-#define Semafor2_NAME "/Mutex_sem"
-#define Semafor3_NAME "/Confirmed_sem"
-#define Semafor4_NAME "/VsetciPrihlaseny_sem"
-#define Semafor5_NAME "/inkrement_sem"
-
-static void wait_random_time(int max) {
-  if (max > 0) {
-    usleep(random() % max * 1000);
-  }
-}
+#define Semafor1 "/Vevnitr_sem"
+#define Semafor2 "/Checked__sem"
+#define Semafor3 "/Confirmed__sem"
+#define Semafor4 "/VsetciPrihlaseny__sem"
+#define Semafor5 "/Inkrement__sem"
+#define Semafor6 "/Tiskni__sem"
+#define Semafor7 "/Konec__sem"
+
+typedef sem_t Semafor;  // prehlednejsi typ pro sem_t.
+typedef pid_t Proces;  // prehlednejsi typ pro pid_t.
+
+Semafor* Vevnitr_Semafor = NULL;  // Povoluje vstup do budovy.
+Semafor* Checked_Semafor = NULL;  // povoluje registraci.
+Semafor* Confirmed_Semafor = NULL;  // Uznava registrovane imigranty.
+Semafor* VsetciPrihlaseny_Semafor = NULL;  // Umoznuje soudci pokracovat po registraci posledniho imigranta.
+Semafor* Inkrement_semafor = NULL;  // Semafor pro zmenu sdilenych prommennych.
+Semafor* Tiskni_semafor = NULL;  // Semafor pro tisk.
+Semafor* Konec_semafor = NULL;  // Semafor pro ukonceni hlavniho procesu.
+FILE* Soubor;  // Ukazatel na soubor.
 
-typedef sem_t Semafor;
+int *Checked_nerozhodnuto, *Vevnitr, *Vevnitr_nerozhodnuto, *Poradi, *Pocet_zbyva, *Soudce_vevnitr,  // Inicializace ukazatelnu na int.
+  Checked_nerozhodnuto_Id, Vevnitr_Id, Vevnitr_nerozhodnuto_Id, Poradi_Id, Pocet_zbyva_Id, Soudce_vevnitr_Id;  // Inicializace int.
 
-int sem_signal(Semafor * sem) {
+int sem_signal(Semafor* sem) {  // prehlednejsi funkce pro sem_post.
   return sem_post(sem);
 }
 
-// Pocet imigrantov, doba na imigranta, doba na soudce, doba na certifikat, doba na rozhodnuti
-int main(int argc, char * argv[]) {
-  (void) argc;
-    // prevent buffering of the output
-  setbuf(stdout, NULL);
-  // remove Semafors
-  sem_unlink(Semafor1_NAME);
-  sem_unlink(Semafor2_NAME);
-  sem_unlink(Semafor3_NAME);
-  sem_unlink(Semafor4_NAME);
-  sem_unlink(Semafor5_NAME);
-
-  if (argc <= 5) {
-    printf("zle");
-    return (EXIT_FAILURE);
-  }
+void soudce(int JG, int JT);  // Soudce.
+void imigrant(int PI, int IG, int IT);  // Tvurce imigrantu.
+void init();  // Inicializuje semafory, a sdilene promenne.
+void cleanup();  // Dealokace zdroju.
+void tiskni(int cislo, int migrant_cislo);  // Tiskne specificke fprintf.
 
-  int * checked_nerozhodnuto = NULL;
-  int * vevnitr = NULL;
-  int * vevnitr_nerozhodnuto = NULL;
-  int * A = NULL;
-  int * pocet_zbyva = NULL;
-
-  int checked_nerozhodnutoId = 0;
-  int vevnitrId = 0;
-  int vevnitr_nerozhodnutoId = 0;
-  int AId = 0;
-  int pocet_zbyvaId = 0;
-
-  int PI = atoi(argv[1]);
-  int IG = atoi(argv[2]);
-  int JG = atoi(argv[3]);
-  int IT = atoi(argv[4]);
-  int JT = atoi(argv[5]);
 
-  int Sudca_vnutri = 0;
-  
-
-  if (PI < 0) {
-    return (EXIT_FAILURE);
-  }
-  if (IG < 0 || IG > 2000) {
+int main(int argc, char* argv[]) {
+  void cleanup();  // Preventivni dealokace zdroju. (V pripade ze byl proces nasilne ukoncen, a znova spusten.)
+  if (argc != 6) {  // Zajistuje spravy pocet argumentu.
+    fprintf(stderr, "Nespravny pocet argumentu\n");
+    cleanup();  // Dealokace zdroju v pripade chyby.
     return (EXIT_FAILURE);
   }
-  if (JG < 0 || JG > 2000) {
+  int PI = atoi(argv[1]);  // Pocet procesu vygenerovanych v kategorii pristehovalcu.
+  int IG = atoi(argv[2]);  // Maximalni hodnota doby (v milisekundach), po ktere je generovan novy proces immigrant.
+  int JG = atoi(argv[3]);  // Maximalni hodnota doby (v milisekundach), po ktere soudce opet vstoupi do budovy.
+  int IT = atoi(argv[4]);  // Maximalni hodnota doby (v milisekundach), ktera simuluje trvani vyzvedavani certifikatu.
+  int JT = atoi(argv[5]);  // Maximalni hodnota doby (v milisekundach), ktera simuluje trvani vydani rozhodnuti.
+
+  if ((Soubor = fopen("proj2.out", "w")) == NULL) {  // Vytvori soubor proj2.out, jinak tiskne chybu.
+    fprintf(stderr, "Nepodarilo se vytvorit proj2.out\n");
+    cleanup();  // Dealokace zdroju v pripade chyby.
     return (EXIT_FAILURE);
   }
-  if (IT < 0 || IT > 2000) {
+  setbuf(Soubor, NULL); // Zajistuje spravne vypisovani v rade.
+  
+  if (PI < 1 || IG < 0 || IG > 2000 || JG < 0 || JG > 2000 || IT < 0 || IT > 2000 || JT < 0 || JT > 2000) {  // Zajistuje spravnost argumentu.
+    fprintf(stderr, "Nespravne argumenty\n");
+    cleanup();  // Dealokace zdroju v pripade chyby.
     return (EXIT_FAILURE);
   }
-  if (JT < 0 || JT > 2000) {
+  init();  // Inicializuje semafory, a sdilene promenne.
+
+  *Pocet_zbyva = PI;  // Pocet neukoncenych imigrantu.
+  (*Poradi)++;  // Poradove cislo vypisovaneho radku.
+  Proces Proces_Id = fork();  // Deli se na hlavni a pomocny proces.
+  if (Proces_Id == 0) {  // Pomocny proces.
+    Proces Proces_Id = fork();  // Deli se na tvurce imigrantu, a soudce.
+    if (Proces_Id == 0) {  // Tvurce imigrantu.
+      imigrant(PI, IG, IT);
+      sem_signal(Konec_semafor);  // Povoli hlavnimu procesu ukoncit se.
+      exit(EXIT_SUCCESS);
+    } else if (Proces_Id > 0) {  // Soudce.
+      soudce(JG, JT);
+      sem_signal(Konec_semafor);  // Povoli hlavnimu procesu ukoncit se. 
+      exit(EXIT_SUCCESS);
+    }
+    else {  // Chyba.
+      fprintf(stderr, "Nepodarilo se vytvorit Soudce nebo Imigranta\n");
+      cleanup();  // Dealokace zdroju v pripade chyby.
+      exit(EXIT_FAILURE);
+    }
+  } else if (Proces_Id > 0) {  // Hlavni proces.
+     
+    sem_wait(Konec_semafor);  // Ceka na ukonceni ostatnich procesu.
+    sem_wait(Konec_semafor);
+    cleanup();  // Dealokace zdroju.
+    return (EXIT_SUCCESS);
+  } else {  // Chyba.
+    fprintf(stderr, "Nepodarilo se vytvorit pomocny proces\n");
+    cleanup();  // Dealokace zdroju v pripade chyby.
     return (EXIT_FAILURE);
   }
-  Semafor * Sudca = NULL;
-  Semafor * Mutex = NULL;
-  Semafor * Confirmed = NULL;
-  Semafor * VsetciPrihlaseny = NULL;
-  Semafor * inkrement = NULL;
+}
 
+void soudce(int JG, int JT) {  // Soudce.
+  do {
+    wait_random_time(JG);  // Maximalni hodnota doby (v milisekundach), po ktere soudce opet vstoupi do budovy.
+    if(*Pocet_zbyva == 0) {  // V pripade, ze se vsichni imigranti ukoncili, tak se taky ukonci.
+      break;
+    }
+    tiskni(6, 0);  // Wants to enter.
+    sem_wait(Vevnitr_Semafor);  // Soudce vstoupi, takze uz zadny imigrant nemuze vstoupit.
+      *Soudce_vevnitr = 1;
+      tiskni(7, 0);  // Enters.
+      sem_wait(Checked_Semafor);  // Nikto se nemuze momentalne registrovat.
+        if (*Vevnitr_nerozhodnuto > *Checked_nerozhodnuto) { //  skontroluje jestli jsou vsichni registrovani.
+          tiskni(8, 0);  // Waits for imm.
+          sem_signal(Checked_Semafor);  // Uvolni registraci pritomnym immigrantum.
+          sem_wait(VsetciPrihlaseny_Semafor);  // Ceka dokud budou vsichni zaregistrovani.
+          sem_wait(Checked_Semafor);  // Nikdo se nemuze momentalne registrovat.
+        }
+        tiskni(9, 0);  // Starts confirmation.
+        sem_wait(Inkrement_semafor);
+          wait_random_time(JT);  // Maximalni hodnota doby (v milisekundach), ktera simuluje trvani vydani rozhodnuti.
+          *Vevnitr_nerozhodnuto = *Checked_nerozhodnuto = 0;  // Potvrzeni vsech pritomnych immigrantu.
+          tiskni(10, 0);  // Ends confirmation.
+          sem_signal(Confirmed_Semafor);
+        sem_signal(Inkrement_semafor);
+        wait_random_time(JT);  // Maximalni hodnota doby (v milisekundach), ktera simuluje trvani vydani rozhodnuti.
+        sem_wait(Inkrement_semafor);
+          *Soudce_vevnitr = 0;
+          tiskni(11, 0);  // Leaves.
+        sem_signal(Inkrement_semafor);
+        sem_wait(Confirmed_Semafor);
+      sem_signal(Checked_Semafor);
+    sem_signal(Vevnitr_Semafor);
+  } while (1);
+  tiskni(12, 0);  // Finishes.
+}
 
-  if ((Sudca = sem_open(Semafor1_NAME, O_CREAT | O_EXCL, 0666, 1)) == SEM_FAILED) {
-    perror("sem_init failed\n");
-    exit(-1);
+void imigrant(int PI, int IG, int IT) {  // Tvurce imigrantu.
+  for (int Imigrant_cislo = 1; Imigrant_cislo <= PI; Imigrant_cislo++) {
+    if (IG != 0) {
+      wait_random_time(IG);  // Maximalni hodnota doby (v milisekundach), po ktere je generovan novy proces immigrant.
+    }
+    Proces Proces_Id = fork();  // Tvori jednotlive imigranty.
+    if (Proces_Id == 0) {
+      tiskni(0, Imigrant_cislo); // Starts.
+      sem_wait(Vevnitr_Semafor);  // Pokud neni soudce v budove, tak immigranti po jednom vstupujou. Jestli nekdo nestihne vstoupit pred soudcem, tak musi cekat az soudce odejde.
+        sem_wait(Inkrement_semafor);
+        (*Vevnitr)++;  // NB.
+        (*Vevnitr_nerozhodnuto)++;  // NE.
+        tiskni(1, Imigrant_cislo);  // Enters.
+        sem_signal(Inkrement_semafor);
+      sem_signal(Vevnitr_Semafor);  // Muze vstoupit dalsi imigrant, nebo soudce.
+      sem_wait(Checked_Semafor);  // Ceka na registraci, nebo na skontrolovani soudcem.
+        sem_wait(Inkrement_semafor);
+          (*Checked_nerozhodnuto)++;  // NC
+          tiskni(2, Imigrant_cislo);  // Checks.
+        sem_signal(Inkrement_semafor);
+        if ((*Soudce_vevnitr == 1) && (*Vevnitr_nerozhodnuto == *Checked_nerozhodnuto)) {
+          sem_signal(VsetciPrihlaseny_Semafor);
+          sem_signal(Checked_Semafor);  // Odemkne soudce.
+        } else {
+          sem_signal(Checked_Semafor);  // Odemkne registraci pro pristi imigranty.
+        }
+      sem_wait(Confirmed_Semafor);  // Ceka dokud ho soudce schvali.
+      sem_signal(Confirmed_Semafor);
+      tiskni(3, Imigrant_cislo);  // Wants certificate.
+      wait_random_time(IT);  // Maximalni hodnota doby (v milisekundach), ktera simuluje trvani vyzvedavani certifikatu.
+      tiskni(4, Imigrant_cislo);  // Got certificate.
+      sem_wait(Vevnitr_Semafor);  // Pokud je soudce v budove, ceka na jeho odchod.
+        sem_wait(Inkrement_semafor);  // Odchazi z budovy.
+          (*Vevnitr)--;  // NB.
+          (*Pocet_zbyva)--;  // Aby soudce necyklil do nekonecna.
+          tiskni(5, Imigrant_cislo);  // Leaves.
+        sem_signal(Inkrement_semafor);
+      sem_signal(Vevnitr_Semafor);  // Povoli vystup dalsim imigrantum z budovy.
+      exit(EXIT_FAILURE);  // Ukoncuje se.
+    }
   }
+}
 
-  if ((Mutex = sem_open(Semafor2_NAME, O_CREAT | O_EXCL, 0666, 1)) == SEM_FAILED) {
-    perror("sem_init failed\n");
-    exit(-1);
-  }
-  if ((Confirmed = sem_open(Semafor3_NAME, O_CREAT | O_EXCL, 0666, 0)) == SEM_FAILED) {
+void init() {  // Inicializuje semafory, a sdilene promenne.
+  if ((Vevnitr_Semafor = sem_open(Semafor1, O_CREAT | O_EXCL, 0666, 1)) == SEM_FAILED || 
+      (Checked_Semafor = sem_open(Semafor2, O_CREAT | O_EXCL, 0666, 1)) == SEM_FAILED || 
+      (Confirmed_Semafor = sem_open(Semafor3, O_CREAT | O_EXCL, 0666, 0)) == SEM_FAILED || 
+      (VsetciPrihlaseny_Semafor = sem_open(Semafor4, O_CREAT | O_EXCL, 0666, 0)) == SEM_FAILED || 
+      (Inkrement_semafor = sem_open(Semafor5, O_CREAT | O_EXCL, 0666, 1)) == SEM_FAILED || 
+      (Tiskni_semafor = sem_open(Semafor6, O_CREAT | O_EXCL, 0666, 1)) == SEM_FAILED || 
+      (Konec_semafor = sem_open(Semafor7, O_CREAT | O_EXCL, 0666, 0)) == SEM_FAILED) {
+    cleanup();
     perror("sem_init failed\n");
-    exit(-1);
-  }
-  if ((VsetciPrihlaseny = sem_open(Semafor4_NAME, O_CREAT | O_EXCL, 0666, 0)) == SEM_FAILED) {
-    perror("sem_init failed\n");
-    exit(-1);
-  }
-  if ((inkrement = sem_open(Semafor5_NAME, O_CREAT | O_EXCL, 0666, 1)) == SEM_FAILED) {
-    perror("sem_init failed\n");
-    exit(-1);
-  }
-
-
-
-
-  if ((vevnitrId = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1) {
-    perror("shmget failed\n");
-    exit(-1);
-  }
-  if ((vevnitr = shmat(vevnitrId, NULL, 0)) == NULL) {
-    perror("shmat failed\n");
-    exit(-1);
-  }
-
-  if ((vevnitr_nerozhodnutoId = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1) {
-    perror("shmget failed\n");
-    exit(-1);
-  }
-  if ((vevnitr_nerozhodnuto = shmat(vevnitr_nerozhodnutoId, NULL, 0)) == NULL) {
-    perror("shmat failed\n");
-    exit(-1);
-  }
-
-  if ((checked_nerozhodnutoId = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1) {
-    perror("shmget failed\n");
-    exit(-1);
-  }
-  if ((checked_nerozhodnuto = shmat(checked_nerozhodnutoId, NULL, 0)) == NULL) {
-    perror("shmat failed\n");
-    exit(-1);
-  }
-    if ((AId = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1) {
-    perror("shmget failed\n");
-    exit(-1);
-  }
-  if ((A = shmat(AId, NULL, 0)) == NULL) {
-    perror("shmat failed\n");
-    exit(-1);
+    exit(EXIT_FAILURE);
   }
-
-    if ((pocet_zbyvaId = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1) {
+  if ((Vevnitr_Id = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1 || 
+      (Vevnitr_nerozhodnuto_Id = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1 || 
+      (Checked_nerozhodnuto_Id = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1 || 
+      (Poradi_Id = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1 || 
+      (Pocet_zbyva_Id = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1 || 
+      (Soudce_vevnitr_Id = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666)) == -1) {
+    cleanup();
     perror("shmget failed\n");
-    exit(-1);
+    exit(EXIT_FAILURE);
   }
-  if ((pocet_zbyva = shmat(pocet_zbyvaId, NULL, 0)) == NULL) {
+  if ((Vevnitr = shmat(Vevnitr_Id, NULL, 0)) == NULL || 
+      (Vevnitr_nerozhodnuto = shmat(Vevnitr_nerozhodnuto_Id, NULL, 0)) == NULL || 
+      (Checked_nerozhodnuto = shmat(Checked_nerozhodnuto_Id, NULL, 0)) == NULL || 
+      (Poradi = shmat(Poradi_Id, NULL, 0)) == NULL || 
+      (Pocet_zbyva = shmat(Pocet_zbyva_Id, NULL, 0)) == NULL || 
+      (Soudce_vevnitr = shmat(Soudce_vevnitr_Id, NULL, 0)) == NULL) {
+    cleanup();
     perror("shmat failed\n");
-    exit(-1);
+    exit(EXIT_FAILURE);
   }
+}
 
-  * pocet_zbyva = PI;
-  //(* pocet_zbyva) --;
-
-  pid_t processPid = fork();
-  if (processPid == 0) {
-    // pomocny
-    pid_t processPid = fork();
-    if (processPid == 0) {
-      //imigrant
-      for (int i = 1; i <= PI; i++) {
-        pid_t processPid = fork();
-        if (processPid == 0) {
-          if (IG != 0) {
-            wait_random_time(IG);
-          }
-          // imigranti
-          sem_wait(Sudca); //  pokial neni sudca, tak immigranti po jednom vstupuju. Ak niekto nestihne vsupit skor ako vstupi sudca, tak musi pockat na dalsie kolo.
-          
-          sem_wait(inkrement);
-          ( * vevnitr) ++;
-          ( * vevnitr_nerozhodnuto) ++;
-          sem_signal(inkrement);
-                        sem_wait(inkrement);
-                                if (i < 10) {
-                                    printf("%d\t: IMM %d\t\t: enters\t\t\t: %d\t: %d\t: %d\n", (* A)++, i, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                                } else {
-                                    printf("%d\t: IMM %d\t: enters\t\t\t: %d\t: %d\t: %d\n", (* A)++, i, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                                }
-                        sem_signal(inkrement);
-          sem_signal(Sudca); //  moze vstupit dalsi imigrant, alebo sudca
-          
-          sem_wait(Mutex); //  caka na registraciu, alebo na skontrolovanie sudcom
-          sem_wait(inkrement);
-          ( * checked_nerozhodnuto) ++;
-          sem_signal(inkrement);
-                        sem_wait(inkrement);
-                                if (i < 10) {
-                                    printf("%d\t: IMM %d\t\t: checks\t\t\t: %d\t: %d\t: %d\n", (* A)++, i, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                                } else {
-                                    printf("%d\t: IMM %d\t: checks\t\t\t: %d\t: %d\t: %d\n", (* A)++, i, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                                }
-                        sem_signal(inkrement);
-          if ((Sudca_vnutri == 1) && ( * vevnitr_nerozhodnuto == * checked_nerozhodnuto)) {
-            sem_signal(VsetciPrihlaseny);
-          }
-          sem_signal(Mutex);
-
-          sem_wait(Confirmed); //  caka kym ich sudca naturalizuje
-                        sem_wait(inkrement);
-                                if (i < 10) {
-                                    printf("%d\t: IMM %d\t\t: wants certificate\t\t: %d\t: %d\t: %d\n", (* A)++, i, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                                } else {
-                                    printf("%d\t: IMM %d\t: wants certificate\t\t: %d\t: %d\t: %d\n", (* A)++, i, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                                }
-                        sem_signal(inkrement);
-          wait_random_time(IT);
-                        sem_wait(inkrement);
-                                if (i < 10) {
-                                    printf("%d\t: IMM %d\t\t: got certificate\t\t: %d\t: %d\t: %d\n", (* A)++, i, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                                } else {
-                                    printf("%d\t: IMM %d\t: got certificate\t\t: %d\t: %d\t: %d\n", (* A)++, i, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                                }
-                        sem_signal(inkrement);
-
-          sem_wait(Sudca);
-            sem_wait(inkrement);
-            ( * vevnitr) --;
-            sem_signal(inkrement);
-                        sem_wait(inkrement);
-                                if (i < 10) {
-                                    printf("%d\t: IMM %d\t\t: leaves\t\t\t: %d\t: %d\t: %d\n", (* A)++, i, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                                } else {
-                                    printf("%d\t: IMM %d\t: leaves\t\t\t: %d\t: %d\t: %d\n", (* A)++, i, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                                }
-                        sem_signal(inkrement);
-                sem_wait(inkrement);
-                (* pocet_zbyva) --;
-                sem_signal(inkrement);
-          sem_signal(Sudca);
+void cleanup() {  // Dealokace Semaforu, sdilenych promennych, a zavreni souboru.
+  sem_close(Vevnitr_Semafor);
+  sem_close(Checked_Semafor);
+  sem_close(Confirmed_Semafor);
+  sem_close(VsetciPrihlaseny_Semafor);
+  sem_close(Inkrement_semafor);
+  sem_close(Tiskni_semafor);
+  sem_close(Konec_semafor);
+
+  sem_unlink(Semafor1);
+  sem_unlink(Semafor2);
+  sem_unlink(Semafor3);
+  sem_unlink(Semafor4);
+  sem_unlink(Semafor5);
+  sem_unlink(Semafor6);
+  sem_unlink(Semafor7);
+
+  shmctl(Checked_nerozhodnuto_Id, IPC_RMID, NULL);
+  shmctl(Vevnitr_Id, IPC_RMID, NULL);
+  shmctl(Vevnitr_nerozhodnuto_Id, IPC_RMID, NULL);
+  shmctl(Poradi_Id, IPC_RMID, NULL);
+  shmctl(Pocet_zbyva_Id, IPC_RMID, NULL);
+  shmctl(Soudce_vevnitr_Id, IPC_RMID, NULL);
 
-          exit(EXIT_SUCCESS);
-        }
-      }
-    } else if (processPid > 0) {
-      //Sudca
-
-label:
-      wait_random_time(JG);
-
-                    sem_wait(inkrement);
-                        printf("%d\t: JUDGE\t\t: wants to enter\t\t: %d\t: %d\t: %d\n", (* A)++, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                    sem_signal(inkrement);
-      sem_wait(Sudca);
-      sem_wait(Sudca); //  sudca vstupi, takze uz ziadny imigrant nemoze vstupit
-                    sem_wait(inkrement);
-                        printf("%d\t: JUDGE\t\t: enters\t\t\t: %d\t: %d\t: %d\n", (* A)++, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                    sem_signal(inkrement);  
-      sem_wait(Mutex); //  nikto sa nemoze momentalne registrovat
-      Sudca_vnutri = 1;
-      if ( * vevnitr_nerozhodnuto > * checked_nerozhodnuto) { //  skontroluje ci su vsetci registrovany
-                    sem_wait(inkrement);
-                            printf("%d\t: JUDGE\t\t: waits for imm\t\t: %d\t: %d\t: %d\n", (* A)++, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                    sem_signal(inkrement);
-        sem_signal(Mutex);
-        sem_wait(VsetciPrihlaseny); //  caka kym budu vsetci zaregistrovany
-        sem_wait(Mutex);
-      }
-
-      // ak su vsetci pritomny zaregistrovany, tak sudca ich naturalizuje
-                    sem_wait(inkrement);
-                        printf("%d\t: JUDGE\t\t: starts confirmation\t\t: %d\t: %d\t: %d\n", (* A)++, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                    sem_signal(inkrement);
-        sem_signal(Mutex);
-      wait_random_time(JT);
-      for (int j = 0; j < * vevnitr; j++) {
-        sem_signal(Confirmed);
-      }
-      * vevnitr_nerozhodnuto = * checked_nerozhodnuto = 0;
-
-                    sem_wait(inkrement);
-                        printf("%d\t: JUDGE\t\t: ends confirmation\t\t: %d\t: %d\t: %d\n", (* A)++, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                    sem_signal(inkrement);
-
-      wait_random_time(JT);
-      Sudca_vnutri = 0;
-                    sem_wait(inkrement);
-                        printf("%d\t: JUDGE\t\t: leaves\t\t\t: %d\t: %d\t: %d\n", (* A)++, * vevnitr_nerozhodnuto, * checked_nerozhodnuto, * vevnitr);
-                    sem_signal(inkrement);
-      sem_signal(Sudca);
-      sem_signal(Sudca);
-      //  ak nejaky immigrant caka, tak sudca znova vstupi do budovy, inak sa ukonci.
-      if ( * pocet_zbyva > 0) {
-          goto label;
-      }
-      exit(EXIT_SUCCESS);
+  if (Soubor != NULL) fclose(Soubor);
+}
 
+void tiskni(int cislo, int Imigrant_cislo) {  // Tiskne specificke fprintf.
+  sem_wait(Tiskni_semafor);  // Zabranuje tisknout do souboru ostatnim procesum.
+  switch (cislo) {
+  case 0: if (Imigrant_cislo < 10) {  // V pripade dvojciferniho cisla imigranta, upravi zarovnani vystupu.
+      fprintf(Soubor, "%d\t: IMM %d\t\t: starts\n", (*Poradi)++, Imigrant_cislo);
     } else {
-      printf("error failed\n");
-      exit(-1);
-    }
-
-  } else if (processPid > 0) {
-    // hlavny
-
-    sem_signal(Sudca);
-
-    // wait for child to end
-    waitpid(processPid, NULL, 0);
-
-    // close Semafors
-    sem_close(Sudca);
-    sem_close(Mutex);
-    sem_close(Confirmed);
-    sem_close(VsetciPrihlaseny);
-    sem_close(inkrement);
-
-    // remove Semafors
-    sem_unlink(Semafor1_NAME);
-    sem_unlink(Semafor2_NAME);
-    sem_unlink(Semafor3_NAME);
-    sem_unlink(Semafor4_NAME);
-    sem_unlink(Semafor5_NAME);
-
-    shmctl(checked_nerozhodnutoId, IPC_RMID, NULL);
-    shmctl(vevnitrId, IPC_RMID, NULL);
-    shmctl(vevnitr_nerozhodnutoId, IPC_RMID, NULL);
-    shmctl(AId, IPC_RMID, NULL);
-    shmctl(pocet_zbyvaId, IPC_RMID, NULL);
-    return EXIT_SUCCESS;
-
-  } else {
-    printf("error failed\n");
-    exit(-1);
+      fprintf(Soubor, "%d\t: IMM %d\t: starts\n", (*Poradi)++, Imigrant_cislo);
+    } break;
+  case 1: if (Imigrant_cislo < 10) {
+      fprintf(Soubor, "%d\t: IMM %d\t\t: enters\t\t\t: %d\t: %d\t: %d\n", (*Poradi)++, Imigrant_cislo, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr);
+    } else {
+      fprintf(Soubor, "%d\t: IMM %d\t: enters\t\t\t: %d\t: %d\t: %d\n", (*Poradi)++, Imigrant_cislo, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr);
+    } break;
+  case 2: if (Imigrant_cislo < 10) {
+      fprintf(Soubor, "%d\t: IMM %d\t\t: checks\t\t\t: %d\t: %d\t: %d\n", (*Poradi)++, Imigrant_cislo, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr);
+    } else {
+      fprintf(Soubor, "%d\t: IMM %d\t: checks\t\t\t: %d\t: %d\t: %d\n", (*Poradi)++, Imigrant_cislo, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr);
+    } break;
+  case 3: if (Imigrant_cislo < 10) {
+      fprintf(Soubor, "%d\t: IMM %d\t\t: wants certificate\t\t: %d\t: %d\t: %d\n", (*Poradi)++, Imigrant_cislo, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr);
+    } else {
+      fprintf(Soubor, "%d\t: IMM %d\t: wants certificate\t\t: %d\t: %d\t: %d\n", (*Poradi)++, Imigrant_cislo, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr);
+    } break;
+  case 4: if (Imigrant_cislo < 10) {
+      fprintf(Soubor, "%d\t: IMM %d\t\t: got certificate\t\t: %d\t: %d\t: %d\n", (*Poradi)++, Imigrant_cislo, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr);
+    } else {
+      fprintf(Soubor, "%d\t: IMM %d\t: got certificate\t\t: %d\t: %d\t: %d\n", (*Poradi)++, Imigrant_cislo, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr);
+    } break;
+  case 5: if (Imigrant_cislo < 10) {
+      fprintf(Soubor, "%d\t: IMM %d\t\t: leaves\t\t\t: %d\t: %d\t: %d\n", (*Poradi)++, Imigrant_cislo, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr);
+    } else {
+      fprintf(Soubor, "%d\t: IMM %d\t: leaves\t\t\t: %d\t: %d\t: %d\n", (*Poradi)++, Imigrant_cislo, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr);
+    } break;
+  case 6: fprintf(Soubor, "%d\t: JUDGE\t\t: wants to enter\n", (*Poradi)++); break;
+  case 7: fprintf(Soubor, "%d\t: JUDGE\t\t: enters\t\t\t: %d\t: %d\t: %d\n", (*Poradi)++, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr); break;
+  case 8: fprintf(Soubor, "%d\t: JUDGE\t\t: waits for imm\t\t\t: %d\t: %d\t: %d\n", (*Poradi)++, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr); break;
+  case 9: fprintf(Soubor, "%d\t: JUDGE\t\t: starts confirmation\t\t: %d\t: %d\t: %d\n", (*Poradi)++, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr); break;
+  case 10: fprintf(Soubor, "%d\t: JUDGE\t\t: ends confirmation\t\t: %d\t: %d\t: %d\n", (*Poradi)++, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr); break;
+  case 11: fprintf(Soubor, "%d\t: JUDGE\t\t: leaves\t\t\t: %d\t: %d\t: %d\n", (*Poradi)++, *Vevnitr_nerozhodnuto, *Checked_nerozhodnuto, *Vevnitr); break;
+  case 12: fprintf(Soubor, "%d\t: JUDGE\t\t: finishes\n", (*Poradi)++); break;
+  default: break; // Error.
   }
+  sem_signal(Tiskni_semafor);  // Povoluje tisknout do souboru ostatnim procesum.
 }
\ Chybí znak konce řádku na konci souboru
